<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--Set product properties and paths-->
  
  <PropertyGroup>    
    <ProductName>SccmTools</ProductName>
    <ProductCompany>github.com.trondr</ProductCompany>
    <ProductDescription>SccmTools provides a command for creating an SCCM 2012 application from a package definition file.</ProductDescription>
    <ProductCopyright>Copyright &#169; github.com.trondr $([System.DateTime]::Now.Year)</ProductCopyright>
    <ProductProjectName>$(ProductName)</ProductProjectName>

    <ShortYear>$([System.DateTime]::Now.ToString(`yy`))</ShortYear>
    <DayOfYear>$([System.DateTime]::Now.DayOfYear.ToString(`000`))</DayOfYear>
    <Major>1</Major>
    <Minor>0</Minor>
    <Build>$(ShortYear)$(DayOfYear)</Build>
    <Revision>0</Revision>

    <BinDirectory>$(MSBuildProjectDirectory)\bin</BinDirectory>
    <SrcDirectory>$(MSBuildProjectDirectory)\src</SrcDirectory>
    <ToolsDirectory>$(MSBuildProjectDirectory)\tools</ToolsDirectory>
  
    <NunitVersion>2.6.4</NunitVersion>
    
  </PropertyGroup>

  <!--
		Include MSBuild Community Tasks.
	-->
  <Choose>
    <When Condition="Exists('$(ToolsDirectory)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')">
      <PropertyGroup>
        <MSBuildCommunityTasksAvailable>true</MSBuildCommunityTasksAvailable>
		<MSBuildCommunityTasksPath>$(ToolsDirectory)\MSBuildCommunityTasks</MSBuildCommunityTasksPath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MSBuildCommunityTasksAvailable>false</MSBuildCommunityTasksAvailable>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Import Project="$(ToolsDirectory)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" Condition=" '$(MSBuildCommunityTasksAvailable)' == 'true' "/>

    <!--
		Include MSBuild Custom Tasks.
	-->
  <Choose>
    <When Condition="Exists('$(ToolsDirectory)\MSBuildCustomTasks\MSBuildCustomTasks.Targets')">
      <PropertyGroup>
        <MSBuildCustomTasksAvailable>true</MSBuildCustomTasksAvailable>
		<MSBuildCustomTasksPath>$(ToolsDirectory)\MSBuildCustomTasks</MSBuildCustomTasksPath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MSBuildCustomTasksAvailable>false</MSBuildCustomTasksAvailable>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Import Project="$(ToolsDirectory)\MSBuildCustomTasks\MSBuildCustomTasks.Targets" Condition=" '$(MSBuildCustomTasksAvailable)' == 'true' "/>
  
  <!-- Verify that NUnit is available-->
  
  <Choose>
    <When Condition="Exists('$(ToolsDirectory)\NUnit\nunit.exe')">
      <PropertyGroup>
        <NUnitIsAvailable>true</NUnitIsAvailable>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <NUnitIsAvailable>false</NUnitIsAvailable>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Verify if current solution is in a .git repository-->

  <Choose>
    <When Condition="Exists('$(MSBuildProjectDirectory)\.git')">
      <PropertyGroup>
        <IsGitRepository>true</IsGitRepository>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <IsGitRepository>false</IsGitRepository>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\.hg\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\.git\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\.svn\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\bin\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\obj\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\Release\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\Debug\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\Test\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\TestResults\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\doc\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\www\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\*.user" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\*.suo" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\*.zip" />    
	<DefaultExclude Include="$(MSBuildProjectDirectory)\**\TestResult.xml" />
  </ItemGroup>

  <ItemGroup>
    <SourceFiles Include="$(SrcDirectory)\**\*.*" Exclude="@(DefaultExclude)" />
	<SourceFiles Include="$(MSBuildProjectDirectory)\*.*" Exclude="@(DefaultExclude)" />
	<SourceFiles Include="$(ToolsDirectory)\**\*.*" Exclude="@(DefaultExclude)" />
  </ItemGroup>
  
  <Target Name="GitHashInit">
    <CreateProperty Value="unknown">
      <Output TaskParameter="Value" PropertyName="RevisionHash" />
    </CreateProperty>
	<Message Text="Initial RevisionHash=$(RevisionHash)" Importance="normal" />
  </Target>
  
  <Target Name="GitHash" Condition=" '$(IsGitRepository)' == 'true' " DependsOnTargets="GitHashInit">
    <GitVersion LocalPath="$(MSBuildProjectDirectory)" Timeout="5000">
      <Output TaskParameter="CommitHash" PropertyName="RevisionHash" />
    </GitVersion>
	<Message Text="Calculated RevisionHash=$(RevisionHash)" Importance="normal" />
  </Target>

  <Target Name="UpdateRevisionVersion">
    <XmlRead XPath="/version/property[@name='revision']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Revision" />
    </XmlRead>
    <Math.Add Numbers="$(Revision);1">
      <Output TaskParameter="Result" PropertyName="Revision" />
    </Math.Add>
    <XmlUpdate XPath="/version/property[@name='revision']/@value" XmlFileName="version.xml" Value="$(Revision)"/>
  </Target>

  <Target Name="UpdateBuildVersion">
    <XmlRead XPath="/version/property[@name='build']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Build" />
    </XmlRead>
    <Math.Add Numbers="0;$(ShortYear)$(DayOfYear)">
      <Output TaskParameter="Result" PropertyName="Build" />
    </Math.Add>
    <XmlUpdate XPath="/version/property[@name='build']/@value" XmlFileName="version.xml" Value="$(Build)"/>
  </Target>
  
  <Target Name="UpdateVersion" DependsOnTargets="GitHash;UpdateRevisionVersion;UpdateBuildVersion">
    <XmlRead XPath="/version/property[@name='major']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Major" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='minor']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Minor" />
    </XmlRead>
    <CreateProperty Value="$(Major).$(Minor).$(Build).$(Revision)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <Message Text="AssemblyVersion: $(AssemblyVersion)"/>
  </Target>

  <Target Name="Version" DependsOnTargets="GitHash">
    <XmlRead XPath="/version/property[@name='major']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Major" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='minor']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Minor" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='build']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Build" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='revision']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Revision" />
    </XmlRead>
    <CreateProperty Value="$(Major).$(Minor).$(Build).$(Revision)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <CreateProperty Value="$(Major)_$(Minor)_$(Build)_$(Revision)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersionU" />
    </CreateProperty>
    <AssemblyInfo CodeLanguage="CS"
       OutputFile="$(SrcDirectory)\SccmTools\Properties\AssemblyInfo.cs"
       AssemblyDescription="$(ProductDescription)"
       AssemblyCompany="$(ProductCompany)"
       AssemblyProduct="SccmTools"
       AssemblyCopyright="$(ProductCopyright)"
       CLSCompliant="false"
       AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
       AssemblyVersion="$(AssemblyVersion)"
       AssemblyFileVersion="$(AssemblyVersion)"
	  />
	  
	<AssemblyInfo CodeLanguage="CS"
       OutputFile="$(SrcDirectory)\SccmTools.Gui\Properties\AssemblyInfo.cs"
       AssemblyDescription="$(ProductDescription)"
       AssemblyCompany="$(ProductCompany)"
       AssemblyProduct="SccmTools.Gui"
       AssemblyCopyright="$(ProductCopyright)"
       CLSCompliant="false"
       AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
       AssemblyVersion="$(AssemblyVersion)"
       AssemblyFileVersion="$(AssemblyVersion)"
	  />
	  
    <AssemblyInfo CodeLanguage="CS"
       OutputFile="$(SrcDirectory)\SccmTools.Library\Properties\AssemblyInfo.cs"
       AssemblyDescription="$(ProductDescription)"
       AssemblyCompany="$(ProductCompany)"
       AssemblyProduct="SccmTools.Library"
       AssemblyCopyright="$(ProductCopyright)"
       CLSCompliant="false"
       AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
       AssemblyVersion="$(AssemblyVersion)"
       AssemblyFileVersion="$(AssemblyVersion)"
	  />

    <AssemblyInfo CodeLanguage="CS"
      OutputFile="$(SrcDirectory)\SccmTools.Tests\Properties\AssemblyInfo.cs"
      AssemblyDescription="$(ProductDescription)"
      AssemblyCompany="$(ProductCompany)"
      AssemblyProduct="SccmTools.Tests"
      AssemblyCopyright="$(ProductCopyright)"
      CLSCompliant="false"
      AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
      AssemblyVersion="$(AssemblyVersion)"
      AssemblyFileVersion="$(AssemblyVersion)"
	  />
	    	  
  </Target>
  
  <!--Compile-->
  
  <Target Name="Compile" DependsOnTargets="Version">
    <MSBuild Projects="$(SrcDirectory)\SccmTools.Library\SccmTools.Library.csproj" Properties="Configuration=Release;" />
    <MSBuild Projects="$(SrcDirectory)\SccmTools\SccmTools.csproj" Properties="Configuration=Release;" />
	<MSBuild Projects="$(SrcDirectory)\SccmTools.Gui\SccmTools.Gui.csproj" Properties="Configuration=Release;" />
  </Target>

  <Target Name="CompileTests" DependsOnTargets="Compile">
    <MSBuild Projects="$(SrcDirectory)\SccmTools.Tests\SccmTools.Tests.csproj" Properties="Configuration=Release"/>
  </Target>

  <!--Prepare for test-->
  
  <Target Name="DownloadNunit" Condition=" '$(NUnitIsAvailable)' == 'false' ">
    <Message Text="Downloading NUnit..." Importance="normal" />
	<MakeDir Directories="$(BinDirectory)\Download"/>
    <WebDownload FileUri="http://github.com/nunit/nunitv2/releases/download/$(NunitVersion)/NUnit-$(NunitVersion).zip" FileName="$(BinDirectory)\Download\NUnit-$(NunitVersion).zip" />
    <Message Text="Extracting NUnit..." Importance="normal" />
    <Unzip ZipFileName="$(BinDirectory)\Download\NUnit-$(NunitVersion).zip" TargetDirectory="$(BinDirectory)\Download"/>
    <ItemGroup>
      <NUnitFiles Include="$(BinDirectory)\Download\NUnit-$(NunitVersion)\bin\**\**"/>
    </ItemGroup>
    <Message Text="Copying NUnit to tools folder..." Importance="normal" />
    <Copy SourceFiles="@(NUnitFiles)" DestinationFolder="$(ToolsDirectory)\NUnit\%(RecursiveDir)"/>
    <Copy SourceFiles="$(BinDirectory)\Download\NUnit-$(NunitVersion)\license.txt" DestinationFiles="$(ToolsDirectory)\NUnit\license.txt"/>
    <Delete Files="$(BinDirectory)\Download\NUnit-$(NunitVersion).zip"/>
    <DeleteTree Directories="$(BinDirectory)\Download\NUnit-$(NunitVersion)"/>        
  </Target>

  <!-- Run Unit tests -->
  <Target Name="UnitTests" DependsOnTargets="CompileTests;DownloadNunit">
    <CreateItem Include="$(BinDirectory)\Release\SccmTools.Tests\SccmTools.Tests.dll">
      <Output TaskParameter="Include" ItemName="TestAssembly" />
    </CreateItem>

    <NUnit Assemblies="@(TestAssembly)" IncludeCategory="UnitTests" ToolPath="$(ToolsDirectory)\NUnit"/>
  </Target>

  <Target Name="IntegrationTests" DependsOnTargets="CompileTests;DownloadNunit">
    <CreateItem Include="$(BinDirectory)\Release\SccmTools.Tests\SccmTools.Tests.dll">
      <Output TaskParameter="Include" ItemName="TestAssembly" />
    </CreateItem>
    <NUnit Assemblies="@(TestAssembly)" IncludeCategory="IntegrationTests" ToolPath="$(ToolsDirectory)\NUnit"/>
  </Target>
  
  <!-- Run integration tests under the security context of a user member of a privileged group -->
  <Target Name="AdminUserIntegrationTests" DependsOnTargets="CompileTests;DownloadNunit">
    <RunAsUser UserName="jenny" 
               Password="TestPw.19" 
               Domain="$(USERDOMAIN)" 
               FileName="$(ToolsDirectory)\NUnit\nunit-console.exe" 
               Arguments="/nologo &quot;$(BinDirectory)\Release\SccmTools.Tests\SccmTools.Tests.dll&quot; /include=AdminUserIntegrationTests"/>    
  </Target>

  <!-- Run integration tests under the security context of a user NOT member of a privileged group -->
  <Target Name="StandardUserIntegrationTests" DependsOnTargets="CompileTests;DownloadNunit">
    <RunAsUser UserName="jim"
               Password="TestPw.19"
               Domain="$(USERDOMAIN)"
               FileName="$(ToolsDirectory)\NUnit\nunit-console.exe"
               Arguments="/nologo &quot;$(BinDirectory)\Release\SccmTools.Tests\SccmTools.Tests.dll&quot; /include=StandardUserIntegrationTests"/>
  </Target>

  <Target Name="CompileSetup" DependsOnTargets="UnitTests">
    <MSBuild Projects="$(SrcDirectory)\SccmTools.Setup\SccmTools.Setup.wixproj" Properties="Configuration=Release"/>    
  </Target>
  
  <ItemGroup>
    <ReleaseFiles Include="$(BinDirectory)\Release\$(ProductName)\**\*.exe" Exclude="$(BinDirectory)\Release\$(ProductName)\**\Libs\**" />
    <ReleaseFiles Include="$(BinDirectory)\Release\$(ProductName)\**\*.dll" Exclude="$(BinDirectory)\Release\$(ProductName)\**\Libs\**" />
    <ReleaseFiles Include="$(BinDirectory)\Release\$(ProductName)\**\*.pdb" Exclude="$(BinDirectory)\Release\$(ProductName)\**\Libs\**" />
    <ReleaseFiles Include="$(BinDirectory)\Release\$(ProductName)\**\*.config" Exclude="$(BinDirectory)\Release\$(ProductName)\**\Libs\**" />
  </ItemGroup>
  
  <Target Name="Deploy" DependsOnTargets="CompileSetup">
    
    <Zip Files="@(ReleaseFiles)"
         WorkingDirectory="$(BinDirectory)\Release\$(ProductName)"
         ZipFileName="$(BinDirectory)\Release\SccmTools.$(AssemblyVersion).zip"
         ZipLevel="9"
         />
    <Message Text="SccmTools.$(AssemblyVersion) relase zip complete" Importance="normal" />

   <ItemGroup>
      <SetupFiles Include="$(BinDirectory)\Release\SccmTools.Setup\en-us\SccmTools.$(AssemblyVersion).msi" />
   </ItemGroup>
 	
    <Zip Files="@(SetupFiles)"
         WorkingDirectory="$(BinDirectory)\Release\SccmTools.Setup\en-us"
         ZipFileName="$(BinDirectory)\Release\SccmTools.$(AssemblyVersion).msi.zip"
         ZipLevel="9"
         />
    <Message Text="SccmTools.$(AssemblyVersion).msi zip complete" Importance="normal" />

    <Zip Files="@(SourceFiles)"
         WorkingDirectory="$(MSBuildProjectDirectory)"
         ZipFileName="$(BinDirectory)\Release\SccmTools.Source.$(AssemblyVersion).zip"
         ZipLevel="9"
         />
    <Message Text="SccmTools.Source.$(AssemblyVersion) zip complete" Importance="normal" />    
	
	  <ResolveScriptInstallPackage
      ScriptInstallPackageSourcePath="$(SrcDirectory)\github.com.trondr SccmTools"
      ScriptInstallPackageTargetPath="$(BinDirectory)\Release\github.com.trondr SccmTools $(AssemblyVersion)"
      SourceMsiFile="$(BinDirectory)\Release\SccmTools.Setup\en-us\SccmTools.$(AssemblyVersion).msi"
      TargetMsiFile="$(BinDirectory)\Release\github.com.trondr SccmTools $(AssemblyVersion)\VendorInstall\SccmTools.$(AssemblyVersion).msi"
      VendorInstallIni="$(BinDirectory)\Release\github.com.trondr SccmTools $(AssemblyVersion)\VendorInstall\VendorInstall.ini"
      PackageDefinitionSms="$(BinDirectory)\Release\github.com.trondr SccmTools $(AssemblyVersion)\PackageDefinition.sms"
      PackageDefinitionName="SccmTools"
      PackageDefinitionVersion="$(AssemblyVersion)"
      PackageDefinitionPublisher="github.com.trondr"
      PackageDefinitionInstallCommandLine="Install.cmd Install > &quot;%Public%\Logs\github_com_trondr_SccmTools$(AssemblyVersionU)_Install.cmd.log&quot;"
      PackageDefinitionUnInstallCommandLine="Install.cmd UnInstall > &quot;%Public%\Logs\github_com_trondr_SccmTools$(AssemblyVersionU)_UnInstall.cmd.log&quot;"
     />
  </Target>

  <Target Name="Build" DependsOnTargets="CompileSetup">
    <Message Text="$(ProductProjectName).$(AssemblyVersion) build complete" Importance="normal" />
  </Target>
</Project>
